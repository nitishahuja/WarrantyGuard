// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  BUSINESS
  CUSTOMER
  ADMIN
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           UserRole  @default(CUSTOMER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]
  businessProfile  BusinessProfile?
  customerProfile  CustomerProfile?
  passwordReset    PasswordReset?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordReset {
  id      String   @id @default(cuid())
  userId  String   @unique
  token   String   @unique
  expires DateTime
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BusinessProfile {
  id          String   @id @default(cuid())
  companyName String
  industry    String
  phone       String
  website     String?
  address     String?
  bio         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId  String @unique
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  products Product[]
}

model CustomerProfile {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId  String @unique
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  registrations ProductRegistration[]
  claims        WarrantyClaim[]
}

model Product {
  id             String  @id @default(cuid())
  name           String
  description    String
  category       String
  warrantyMonths Int
  serialFormat   String
  image          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  businessId String
  business   BusinessProfile @relation(fields: [businessId], references: [id], onDelete: Cascade)

  registrations ProductRegistration[]
  claims        WarrantyClaim[]
}

model ProductRegistration {
  id           String   @id @default(cuid())
  serialNumber String   @unique
  purchaseDate DateTime
  expiryDate   DateTime
  retailer     String?
  status       String   @default("active")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  productId  String
  product    Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  customerId String
  customer   CustomerProfile @relation(fields: [customerId], references: [id], onDelete: Cascade)

  claims WarrantyClaim[]
}

model WarrantyClaim {
  id                String   @id @default(cuid())
  issue             String
  description       String
  contactPreference String
  status            String   @default("pending")
  resolution        String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  productId      String
  product        Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  customerId     String
  customer       CustomerProfile    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  registrationId String
  registration   ProductRegistration @relation(fields: [registrationId], references: [id], onDelete: Cascade)

  timeline ClaimTimeline[]
}

model ClaimTimeline {
  id          String   @id @default(cuid())
  type        String   // created, status-change, message
  description String
  sender      String?  // customer, support
  createdAt   DateTime @default(now())

  claimId String
  claim   WarrantyClaim @relation(fields: [claimId], references: [id], onDelete: Cascade)
}

